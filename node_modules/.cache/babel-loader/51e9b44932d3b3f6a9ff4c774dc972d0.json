{"ast":null,"code":"import _regeneratorRuntime from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/src/client/Components/ManagerViewComponents/OrgChartComponents/OrgChart.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Tree from 'react-d3-tree';\nimport ip from \"../../LandingPageComponents/JobView\"; //must install react-d3-tree: \"npm install react-d3-tree\"\n\nvar chart = [{\n  name: 'Top Level',\n  attributes: {\n    keyA: 'val A'\n  },\n  children: [{\n    name: 'Level 2: A',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C'\n    },\n    children: [{\n      name: 'Level 3: A',\n      attributes: {\n        keyA: 'A'\n      },\n      children: [{\n        name: 'Level 4: A',\n        attributes: {\n          keyA: 'A'\n        },\n        children: [{\n          name: 'Level 5: A',\n          attributes: {\n            keyA: 'A'\n          }\n        }, {\n          name: 'Level 5: B',\n          attributes: {\n            keyA: 'A'\n          }\n        }]\n      }, {\n        name: 'Level 4: B',\n        attributes: {\n          keyA: 'A'\n        },\n        children: [{\n          name: 'Level 5: C',\n          attributes: {\n            keyA: 'A'\n          }\n        }]\n      }]\n    }, {\n      name: 'Level 3: B',\n      attrubutes: {\n        keyA: 'A'\n      },\n      children: [{\n        name: 'Level 4: C',\n        attributes: {\n          keyA: 'A'\n        },\n        children: [{\n          name: 'Level 5: D',\n          attributes: {\n            keyA: 'A'\n          }\n        }]\n      }, {\n        name: 'Level 4 : D',\n        attributes: {\n          keyA: 'A'\n        },\n        children: [{\n          name: 'Level 5: E',\n          attribute: {\n            keyA: 'A'\n          }\n        }]\n      }]\n    }]\n  }, {\n    name: 'Level 2: B',\n    attributes: {\n      keyA: 'val A',\n      keyB: 'val B',\n      keyC: 'val C'\n    },\n    children: [{\n      name: 'Level 3: C',\n      attributes: {\n        keyA: 'A'\n      }\n    }]\n  }]\n}];\n\nvar OrgChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OrgChart, _Component);\n\n  function OrgChart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OrgChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OrgChart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      employees: null\n    };\n\n    _this.getEmployees =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        var res, _ref2, data, caller;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //when called, runs in background to load employee data\n                console.log(\"GETTING\");\n                console.log(id); //TODO: route to /orgChart, make /orgChart build a tree in server.js\n\n                console.log(\"RES\");\n                id = 1;\n                _context.next = 6;\n                return axios.get(\"http://\" + ip + \":3001/orgChart\", {\n                  params: {\n                    managerId: id\n                  }\n                });\n\n              case 6:\n                res = _context.sent;\n                _context.next = 9;\n                return res.data;\n\n              case 9:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                console.log(data);\n                console.log(\"DONe\");\n                caller = _assertThisInitialized(_assertThisInitialized(_this));\n                data.forEach(function (employee) {\n                  console.log(employee.id);\n                  employee.branches = caller.getEmployees(employee.id);\n                });\n\n                _this.setState({\n                  employees: data\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(OrgChart, [{\n    key: \"togglePopup\",\n    value: function togglePopup() {\n      console.log(\"TOGGLE\");\n      this.setState({\n        showPopup: !this.state.showPopup,\n        employees: []\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //when component is created, gets employees\n      this.getEmployees();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.employees) {\n        var employees = [];\n        this.state.employees.forEach(function (element) {\n          employees.push(element); //push employees from state to array\n          //TODO: make employee node class where each employee has other employees below them\n          //employees should be populated from their previous nodes, not necessarily in an array\n          //can be formatted to the style of const chart above\n        }); //convert employee array to hash map of employees with key being managerId\n        //in order to get easy access to each group of children and build chart from there\n\n        var empMap = {};\n        var i;\n\n        for (i = 0; i < employees.length; i++) {\n          empMap[employees[i].managerId] = employees[i];\n        }\n\n        return (//React graph to build org chart\n          React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"popup\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"popup_inner\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            id: \"treeWrapper\",\n            syle: {\n              width: '20cm',\n              height: '20cm'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180\n            },\n            __self: this\n          }, React.createElement(Tree, {\n            data: chart,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          })), React.createElement(\"button\", {\n            id: \"closeButton\",\n            onClick: this.props.closePopup,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183\n            },\n            __self: this\n          }, \"Close\"))))\n        );\n      } else {\n        //calls when there are no employees\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, \" Loading \"));\n      }\n    }\n  }]);\n\n  return OrgChart;\n}(Component);\n\nexport default OrgChart;","map":{"version":3,"sources":["/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/src/client/Components/ManagerViewComponents/OrgChartComponents/OrgChart.js"],"names":["React","Component","axios","Tree","ip","chart","name","attributes","keyA","children","keyB","keyC","attrubutes","attribute","OrgChart","state","employees","getEmployees","id","console","log","get","params","managerId","res","data","caller","forEach","employee","branches","setState","showPopup","element","push","empMap","i","length","width","height","props","closePopup"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport Tree from 'react-d3-tree';\nimport ip from \"../../LandingPageComponents/JobView\"\n//must install react-d3-tree: \"npm install react-d3-tree\"\nconst chart=[\n        {\n            name: 'Top Level',\n            attributes:{\n                keyA: 'val A',\n            },\n            children:[\n                {\n                    name: 'Level 2: A',\n                    attributes:{\n                        keyA: 'val A',\n                        keyB: 'val B',\n                        keyC: 'val C',\n                    },\n                    children:[\n                      {\n                        name: 'Level 3: A',\n                        attributes:{\n                          keyA: 'A'\n                        },\n                        children:[\n                          {\n                            name: 'Level 4: A',\n                            attributes:{\n                              keyA: 'A'\n                            },\n                            children:[\n                              {\n                                name: 'Level 5: A',\n                                attributes:{\n                                  keyA: 'A'\n                                }\n                              },\n                              {\n                                name: 'Level 5: B',\n                                attributes:{\n                                  keyA: 'A'\n                                }\n                              }\n                            ]\n                          },\n                          {\n                            name: 'Level 4: B',\n                            attributes:{\n                              keyA: 'A'\n                            },\n                            children: [\n                              {\n                                name: 'Level 5: C',\n                                attributes:{\n                                  keyA: 'A'\n                                },\n                              }\n                            ]\n                          }\n                        ]\n                      },\n                      {\n                        name: 'Level 3: B',\n                        attrubutes:{\n                          keyA: 'A'\n                        },\n                        children: [\n                          {\n                            name: 'Level 4: C',\n                            attributes:{\n                              keyA: 'A'\n                            },\n                            children:[\n                              {\n                                name: 'Level 5: D',\n                                attributes:{\n                                  keyA: 'A'\n                                }\n                              }\n                            ]\n                          },\n                          {\n                            name: 'Level 4 : D',\n                            attributes:{\n                              keyA: 'A'\n                            },\n                            children:[\n                              {\n                                name: 'Level 5: E',\n                                attribute:{\n                                  keyA: 'A'\n                                }\n                              }\n                            ]\n                          }\n                        ]\n                      }\n                    ]\n                },\n                {\n                    name: 'Level 2: B',\n                    attributes:{\n                      keyA: 'val A',\n                      keyB: 'val B',\n                      keyC: 'val C',},\n                    children:[\n                      {\n                        name: 'Level 3: C',\n                        attributes:{\n                          keyA: 'A'\n                        }\n                      }\n                    ]\n                },\n            ],\n        },\n];\n\nclass OrgChart extends Component {\n\n    state = {\n      employees: null\n    }\n\n    togglePopup() {\n        console.log(\"TOGGLE\")\n        this.setState({\n            showPopup: !this.state.showPopup,\n            employees: []\n        });\n    }\n\n    componentDidMount(){ //when component is created, gets employees\n  \t\tthis.getEmployees();\n  \t}\n\n    getEmployees = async (id) => { //when called, runs in background to load employee data\n      console.log(\"GETTING\")\n      console.log(id)\n      //TODO: route to /orgChart, make /orgChart build a tree in server.js\n      console.log(\"RES\")\n      id = 1\n      let res = await axios.get(\"http://\"+ip+\":3001/orgChart\", {params: {managerId: id}});\n  \t\tlet {data} = await res.data;\n  \t\tconsole.log(data);\n      console.log(\"DONe\")\n      let caller = this\n      data.forEach(function(employee){\n        console.log(employee.id)\n        employee.branches = caller.getEmployees(employee.id)\n      })\n  \t\tthis.setState({employees: data})\n  \t};\n\n\n    render() {\n      if (this.state.employees) {\n        let employees = []\n        this.state.employees.forEach(function(element){\n          employees.push(element) //push employees from state to array\n          //TODO: make employee node class where each employee has other employees below them\n          //employees should be populated from their previous nodes, not necessarily in an array\n          //can be formatted to the style of const chart above\n        })\n\n\t\t//convert employee array to hash map of employees with key being managerId\n\t\t//in order to get easy access to each group of children and build chart from there\n\t\tvar empMap={};\n\t\tvar i;\n\t\tfor(i=0; i<employees.length; i++){\n\t\t\tempMap[employees[i].managerId]=employees[i];\n\t\t}\n\n        return (\n            //React graph to build org chart\n            <div>\n                    <div className='popup'>\n                        <div className='popup_inner'>\n                            <div id=\"treeWrapper\" syle={{width: '20cm', height: '20cm'}}>\n                                <Tree data={chart}/>\n                            </div>\n                            <button id =\"closeButton\" onClick={this.props.closePopup}>Close</button>\n                        </div>\n                    </div>\n            </div>\n\n        );}\n      else{ //calls when there are no employees\n        return (<div>\n        <h1> Loading </h1>\n        </div>)\n      }\n    }\n}\n\nexport default OrgChart;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/src/client/Components/CurrentJobPostingCards.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios/index';\nimport { Container, Row, Col, Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nimport JobPostingCard from \"./JobPostingCard\"; //Hardcoded data (Should be replaced by data from backend)\n\nvar CurrentJobPostingCards =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CurrentJobPostingCards, _Component);\n\n  function CurrentJobPostingCards(props) {\n    var _this;\n\n    _classCallCheck(this, CurrentJobPostingCards);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CurrentJobPostingCards).call(this, props));\n    console.log(_this.props);\n    _this.state = {\n      jobsList: _this.props.jobs,\n      currentPage: 1,\n      jobsPerPage: 6\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //Handle clicks when navigation buttons are pressed\n\n\n  _createClass(CurrentJobPostingCards, [{\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      this.setState({\n        currentPage: Number(event.target.id)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          jobs = _this$state.jobsList,\n          currentPage = _this$state.currentPage,\n          jobsPerPage = _this$state.jobsPerPage; // Logic for displaying current jobPostings\n\n      var indexOfLastJobPosting = currentPage * jobsPerPage;\n      var indexOfFirstJobPosting = indexOfLastJobPosting - jobsPerPage;\n      var currentJobPosting = jobs.slice(indexOfFirstJobPosting, indexOfLastJobPosting); //Logic for displaying 6 cards per page\n\n      var JobPostingCardArray = currentJobPosting.map(function (object, index) {\n        console.log(index);\n\n        if (index % 6 === 0) {\n          console.log(\"Using \" + index);\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }, React.createElement(Row, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, React.createElement(Col, {\n            sm: \"6\",\n            md: {\n              size: 10,\n              offset: 1\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, React.createElement(Row, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, React.createElement(Col, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, \" \", React.createElement(JobPostingCard, {\n            title: jobs[(currentPage - 1) * 6 + index % 6].title,\n            location: jobs[(currentPage - 1) * 6 + index % 6].location,\n            description: jobs[(currentPage - 1) * 6 + index % 6].description,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }), \" \"), React.createElement(Col, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, \" \", React.createElement(JobPostingCard, {\n            invisible: (currentPage - 1) * 6 + (index + 1) % 6 >= jobs.length,\n            title: (currentPage - 1) * 6 + (index + 1) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 1) % 6].title : \"\",\n            location: (currentPage - 1) * 6 + (index + 1) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 1) % 6].location : \"\",\n            description: (currentPage - 1) * 6 + (index + 1) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 1) % 6].description : \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }), \" \"), React.createElement(Col, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, \" \", React.createElement(JobPostingCard, {\n            invisible: (currentPage - 1) * 6 + (index + 2) % 6 >= jobs.length,\n            title: (currentPage - 1) * 6 + (index + 2) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 2) % 6].title : \"\",\n            location: (currentPage - 1) * 6 + (index + 2) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 2) % 6].location : \"\",\n            description: (currentPage - 1) * 6 + (index + 2) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 2) % 6].description : \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }), \" \")), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }), React.createElement(Row, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, React.createElement(Col, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, \" \", React.createElement(JobPostingCard, {\n            invisible: (currentPage - 1) * 6 + (index + 3) % 6 >= jobs.length,\n            title: (currentPage - 1) * 6 + (index + 3) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 3) % 6].title : \"\",\n            location: (currentPage - 1) * 6 + (index + 3) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 3) % 6].location : \"\",\n            description: (currentPage - 1) * 6 + (index + 3) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 3) % 6].description : \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }), \" \"), React.createElement(Col, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, \" \", React.createElement(JobPostingCard, {\n            invisible: (currentPage - 1) * 6 + (index + 4) % 6 >= jobs.length,\n            title: (currentPage - 1) * 6 + (index + 4) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 4) % 6].title : \"\",\n            location: (currentPage - 1) * 6 + (index + 4) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 4) % 6].location : \"\",\n            description: (currentPage - 1) * 6 + (index + 4) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 4) % 6].description : \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }), \" \"), React.createElement(Col, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, \" \", React.createElement(JobPostingCard, {\n            invisible: (currentPage - 1) * 6 + (index + 5) % 6 >= jobs.length,\n            title: (currentPage - 1) * 6 + (index + 5) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 5) % 6].title : \"\",\n            location: (currentPage - 1) * 6 + (index + 5) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 5) % 6].location : \"\",\n            description: (currentPage - 1) * 6 + (index + 5) % 6 < jobs.length ? jobs[(currentPage - 1) * 6 + (index + 5) % 6].description : \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }), \" \")))));\n        }\n      }); // Logic for displaying page numbers\n\n      var pageNumbers = [];\n\n      for (var i = 1; i <= Math.ceil(jobs.length / jobsPerPage); i++) {\n        pageNumbers.push(i);\n      }\n\n      var renderPageNumbers = pageNumbers.map(function (number) {\n        return React.createElement(\"li\", {\n          key: number,\n          id: number,\n          onClick: _this2.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, number);\n      });\n      return React.createElement(Container, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, JobPostingCardArray, React.createElement(\"ul\", {\n        id: \"page-numbers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, renderPageNumbers));\n    }\n  }]);\n\n  return CurrentJobPostingCards;\n}(Component);\n\nexport default CurrentJobPostingCards;","map":{"version":3,"sources":["/Users/maxwellhubbard/OneDrive/320-team-4-MHubs/src/client/Components/CurrentJobPostingCards.js"],"names":["React","Component","axios","Container","Row","Col","Pagination","PaginationItem","PaginationLink","JobPostingCard","CurrentJobPostingCards","props","console","log","state","jobsList","jobs","currentPage","jobsPerPage","handleClick","bind","event","setState","Number","target","id","indexOfLastJobPosting","indexOfFirstJobPosting","currentJobPosting","slice","JobPostingCardArray","map","object","index","size","offset","title","location","description","length","pageNumbers","i","Math","ceil","push","renderPageNumbers","number"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios/index'\nimport { Container, Row, Col, Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nimport JobPostingCard from \"./JobPostingCard\";\n\n//Hardcoded data (Should be replaced by data from backend)\n\n\n\n\n\nclass CurrentJobPostingCards extends Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n    this.state = {\n      jobsList: this.props.jobs,\n      currentPage: 1,\n      jobsPerPage: 6\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  //Handle clicks when navigation buttons are pressed\n  handleClick(event) {\n    this.setState({\n      currentPage: Number(event.target.id)\n    });\n  }\n\n\n  render() {\n    const { jobsList: jobs, currentPage, jobsPerPage } = this.state;\n\n    // Logic for displaying current jobPostings\n    const indexOfLastJobPosting = currentPage * jobsPerPage;\n    const indexOfFirstJobPosting = indexOfLastJobPosting - jobsPerPage;\n    const currentJobPosting = jobs.slice(indexOfFirstJobPosting, indexOfLastJobPosting);\n\n  \n\n    //Logic for displaying 6 cards per page\n    let JobPostingCardArray = currentJobPosting.map(function (object, index) {\n      console.log(index);\nif(index %6===0){\n  console.log(\"Using \" + index);\n  return (\n      <div>\n    <Row>\n          <Col sm=\"6\" md={{size: 10, offset: 1}}>\n            <Row>\n              <Col> <JobPostingCard title ={jobs[(currentPage -1)*6 + index%6].title} location ={jobs[(currentPage -1)*6 + index%6].location} description= {jobs[(currentPage -1)*6 + index%6].description}/> </Col>\n              <Col> <JobPostingCard invisible={(currentPage - 1) * 6 + (index + 1) % 6 >= jobs.length} title ={(currentPage -1)*6 + (index+1)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+1)%6].title : \"\"} location ={(currentPage -1)*6 + (index+1)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+1)%6].location : \"\"} description= {(currentPage -1)*6 + (index+1)%6 < jobs.length ?jobs[(currentPage -1)*6 + (index+1)%6].description : \"\"}/> </Col>\n              <Col> <JobPostingCard invisible={(currentPage - 1) * 6 + (index + 2) % 6 >= jobs.length} title ={(currentPage -1)*6 + (index+2)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+2)%6].title : \"\"} location ={(currentPage -1)*6 + (index+2)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+2)%6].location : \"\"} description= {(currentPage -1)*6 + (index+2)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+2)%6].description : \"\"}/> </Col>\n            </Row>\n            <br></br>\n            <Row>\n            <Col> <JobPostingCard invisible={(currentPage - 1) * 6 + (index + 3) % 6 >= jobs.length} title ={(currentPage -1)*6 + (index+3)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+3)%6].title : \"\"} location ={(currentPage -1)*6 + (index+3)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+3)%6].location : \"\"} description= {(currentPage -1)*6 + (index+3)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+3)%6].description : \"\"}/> </Col>\n            <Col> <JobPostingCard invisible={(currentPage - 1) * 6 + (index + 4) % 6 >= jobs.length} title ={(currentPage -1)*6 + (index+4)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+4)%6].title : \"\"} location ={(currentPage -1)*6 + (index+4)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+4)%6].location : \"\"} description= {(currentPage -1)*6 + (index+4)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+4)%6].description : \"\"}/> </Col>\n            <Col> <JobPostingCard invisible={(currentPage - 1) * 6 + (index + 5) % 6 >= jobs.length} title ={(currentPage -1)*6 + (index+5)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+5)%6].title : \"\"} location ={(currentPage -1)*6 + (index+5)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+5)%6].location : \"\"} description= {(currentPage -1)*6 + (index+5)%6 < jobs.length ? jobs[(currentPage -1)*6 + (index+5)%6].description : \"\"}/> </Col>\n\n            </Row>\n          </Col>\n        </Row>\n</div>)\n } \n\n\n\n  })\n    \n\n    // Logic for displaying page numbers\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(jobs.length / jobsPerPage); i++) {\n      pageNumbers.push(i);\n    }\n\n    const renderPageNumbers = pageNumbers.map(number => {\n      return (\n        <li\n          key={number}\n          id={number}\n          onClick={this.handleClick}\n        >\n          {number}\n        </li>\n      );\n    });\n\n    return (\n      <Container fluid>\n        {JobPostingCardArray}\n        <ul id=\"page-numbers\">\n          {renderPageNumbers}\n        </ul>\n        </Container>\n\n    );\n  }\n}\n\n\n\n\nexport default CurrentJobPostingCards;\n\n\n"]},"metadata":{},"sourceType":"module"}